sailtrainer (Segeltrainer)
==========================

Dies sind Android-Anwendungen zur Vorbereitung auf verschiedene deutsche
Führerscheine im Wassersport. Vom Prinzip handelt es sich um sechs Kopien des
gleichen Quelltextes, der wiederholt Fragen mit mehreren Antwortmöglichkeiten
stellt bis diese fünf mal in Reihe richtig beantwortet wurden.

Ein bisschen weicht die Implementierung des SKS-Trainers ab, da in der
zugehörigen Prüfung Freitextantworten gegeben werden müssen.

Dies hier ist der Quelltext dieser Android-Anwendungen (Apps). In übersetzter
Form sind sie auch im Google Play Store vorhanden und können direkt von dort
installiert werden:

https://play.google.com/store/apps/details?id=eu.wimmerinformatik.sbfb
https://play.google.com/store/apps/details?id=eu.wimmerinformatik.sbfs
https://play.google.com/store/apps/details?id=eu.wimmerinformatik.sks
https://play.google.com/store/apps/details?id=eu.wimmerinformatik.src
https://play.google.com/store/apps/details?id=eu.wimmerinformatik.trainer
https://play.google.com/store/apps/details?id=eu.wimmerinformatik.lrc

Ich habe die Programme auf GitHub veröffentlicht, da ich immer wieder gefragt
wurde, ob ich den Quelltext für Experimente zur Verfügung stelle. (Jetzt ja ...)


Bauanleitung für die App
========================

Diese Apps werden mit Maven gebaut. Die folgenden Werkzeuge müssen zuvor
installiert sein:

- Maven
- Java JDK
- Android SDK

Außerdem benötigst du auch ein kryptografisches Schlüsselpaar um die Anwendungen
zu signieren. Hierzu reicht ein selbst-signierter Schlüssel vollkommen aus.
Unter Android benutzt das Gerät die Signatur hauptsächlich um zu prüfen, ob ein
Update installiert werden darf.

Wie du einen Schlüssel erzeugst ist auf der folgenden Seite beschrieben:
http://developer.android.com/tools/publishing/app-signing.html#signing-manually
(leider nur englisch).

(Du musst nur dem ersten Schritt dieser Anleitung folgen. Die Signatur wird von
Maven automatisch erzeugt.)

Nachdem du deinen eigenen Schlüssel erzeugt hast, musst du Maven sagen wo es ihn
finden kann und welches Passwort du gewählt hast. Dies geschieht durch
Einstellungen in der Maven-Konfiguration. Diese befindet sich normalerweise in
der Datei ~/.m2/settings.xml (auf Unix-Systemen). In dieser Datei sollte etwas
wie dies stehen:

<?xml version='1.0'?>
<settings
    xmlns="http://maven.apache.org/SETTINGS/1.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0
                        http://maven.apache.org/xsd/settings-1.0.0.xsd">

    <profiles>
	<profile>
	    <activation>
		<activeByDefault>true</activeByDefault>
	    </activation>
	    <properties>
		<androidsign.keystore>${user.home}/your.keystore</androidsign.keystore>
		<androidsign.alias>android-release-key</androidsign.alias>               
		<androidsign.keypass>password of your key</androidsign.keypass>                
		<androidsign.storepass>password of your keystore</androidsign.storepass>
	    </properties>
	</profile>
    </profiles>
</settings>

Nach diesen Vorbereitungen kannst du nun in den Ordner der App wechseln, die du
übersetzen möchtest (z.B. "cd SBFB-Trainer"). Das Übersetzen startest du mit dem
folgenden Befehl:

mvn clean install -Dandroid.release=true

Danach hast du im Unter-Ordner target eine Datei
sbfbtrainer-1.5.3-signed-aligned.apk.

Diese Datei nennt sich aligned (engl. "ausgerichtet"), aber sie ist es nicht
wirklich. Du solltest dies jetzt noch mit dem Programm zipalign nachholen:

zipalign -v 4 sbfbtrainer-1.5.3-signed-aligned.apk sbfbtrainer.apk

Danach hast du die Datei sbfbtrainer.apk die jetzt verbreitet werden kann.


Matthias Wimmer, 2014-12-31
